
//Includes
var events = require('js/modules/common/base.module.js');
var Enum = require('js/modules/common/enums.js');

//Private
var state = Enum.lyricsStatus.get('not-set'); //lyrics status enum value
var lrc = []; //array of lines  objects
var currentLineIndex = null;
var delta = 0; //the higher, the sooner line appears and faster disappers (default= 0 ms)

module.exports = Lyrics;

function Lyrics() {
  //******* PUBLIC PROPERTIES *********
  this.text = '';  
  this.lastDownloadTrialDatetime = null;
  currentLineIndex = null;
  lrc = [];
  state = Enum.lyricsStatus.get('not-set');
}

//******* PUBLIC FUNCTIONS *********

/*
set the pointer of current lyrics line
*/
Lyrics.prototype.updateCurrentLine = function(currentTrackPosition){
	//1-define the start index to start searching from.
	var startIndex = 0;

	//to show lyrics faster or slower
	if(delta)
		currentTrackPosition += delta;

	//if user doesn't change track position backwards (either progressed on its own or user changed it forward)
	if(currentLineIndex && lrc[currentLineIndex] && lrc[currentLineIndex].milliseconds && currentTrackPosition > lrc[currentLineIndex].milliseconds){	
		//start the search from last position (middle of array).
		startIndex = currentLineIndex;
	}

	//2-Search for the next line of lyrics
    var previousLine = lrc[startIndex];
    var previousLineIndex = startIndex;

	if(currentTrackPosition < previousLine.milliseconds ){	//prevents searching an entire array when the first line time hasn't came up yet.
		currentLineIndex = null;
		return;
	}

	for (var i = startIndex + 1; i < lrc.length; i++){	  

		if(currentTrackPosition >= previousLine.milliseconds && currentTrackPosition < lrc[i].milliseconds){	//line found
			currentLineIndex = previousLineIndex;	  	
			break;
		}		
		else{	//line not found yet, keep looking.
			previousLine = lrc[i];
			previousLineIndex = i;	    
		}

	}//end for
	
};

/*
set the text of the lyrics
*/
Lyrics.prototype.setText = function(lyricsLRCtext){
	
	//validation: make sure the text is not empty and valid json array of lines.
	this.text = lyricsLRCtext;
	lrc = JSON.parse(lyricsLRCtext);

	//if all goes well and lrc is valid array of objects
	
	//make sure that all objects are correct (filter lrc)
 
	lrc = getCleanLRC(lrc);


	state = Enum.lyricsStatus.get('ready');

	//if we fail here, set status as invalid
};


function getCleanLRC(lrcArray){
	var cleanLrc = [];

	for (var i = 0; i < lrcArray.length; i++){	  
		if(lrcArray[i] && lrcArray[i].milliseconds && lrcArray[i].milliseconds >= 0 && lrcArray[i].line && lrcArray[i].line != ''){
			cleanLrc.push(lrcArray[i]);
		} 
	}//end for

	return cleanLrc;
}

/*
checks if there is lyrics text avialble in the current object
@Returns: boolean
*/
Lyrics.prototype.isSet = function(){
	if(this.text && lrc && Array.isArray(lrc) && lrc.length >0)
		return true;
	else
		return false;
};

/*
get current line index
@Return: object
*/
Lyrics.prototype.getCurrentLineIndex = function(){
	return currentLineIndex;
};

/*
get current line index
@Return: object
*/
Lyrics.prototype.getCurrentLine = function(){
	if(this.isSet() && currentLineIndex >=0 )
		return lrc[currentLineIndex].line;
	else
		return '';
};

/*
get lrc (array of object)
@Return: object
*/
Lyrics.prototype.getLRC = function(){
	if(lrc && Array.isArray(lrc))
		return lrc;
	else
		return [];
};

/*
check what's up with the lyrics of this track
@Return: lyricsStatusEnum value
*/
Lyrics.prototype.getState = function(){
	if(state && state!='')
		return state;
	else
		return Enum.lyricsStatus.get('not-set');
};

/*
check what's up with the lyrics of this track
@Return: lyricsStatusEnum value
*/
Lyrics.prototype.setState = function(lyricsState){
	state = lyricsState;
};

/*
Get time since last download trial
@Return: integers represnets time in seconds
*/
Lyrics.prototype.getTimeSinceLastDownloadTrial = function(){
	if(this.lastDownloadTrialDatetime){
		//find differnce between Now and this.lastDownloadTrialDatetime
		//return the difference in seconds
	}

	return 0;
};